wHgaGe34Bgq0

    <!-- <form method="POST" action="/">
        {{ form.csrf_token }}
        {{ form.choices }}
        <button>Filter</button>
    </form> -->

<div class="col-md-4">
  <div class="content-section">
  <h3>Our Sidebar</h3>
  <p class='text-muted'>You can put any information here you'd like.
      <li class="list-group">
      {% if current_user.is_authenticated %}
          <li class="list-group-item list-group-item-light">Books you've borrowed: stats[0]</li>
      {% endif %}
      <li class="list-group-item list-group-item-light">Most Popular Book: </li>
      <li class="list-group-item list-group-item-light">Most Popular Genre: </li>
      <li class="list-group-item list-group-item-light">etc</li>
      </ul>
  </p>
  </div>
</div>  

# database 
# app.config['SQLALCHEMY_DATABASE_URI']='postgresql://postgres:postgres@it2002-08-i.comp.nus.edu.sg/postgres'
# db=SQLAlchemy(app)

# class Postgres(db.Model):
#   __tablename__='users'
#   email=db.Column(db.Integer,primary_key=True)
#   username=db.Column(db.String(40))
#   password=db.Column(db.String(40))
#   creation_date=db.Column(db.String(40))

#   def __init__(self,email,username,password,creation_date):
#     self.email=email
#     self.username=username
#     self.password=password
#     self.creation_date=creation_date

# @app.route('/')
# def index():
#   return render_template('index.html')
  
# @app.route('/submit', methods=['POST'])
# def submit():
#   if request.method =='POST':
#     email= request.form['email']
#     username=request.form['username']
#     password=request.form['password']
#     creation_date=request.form['creation_date']

#     user=Postgres(email,username,password,creation_date)
#     db.session.add(user)
#     db.session.commit()

#   return render_template('success.html', data=fname)

{% extends "layout.html" %}

{% block content %}
  <h1>Create Post</h1>

  <!-- The form for creating a new post -->
  <form method="POST" action="{{ url_for('new_post') }}">
    {{ form.hidden_tag() }} <!-- Renders a hidden input field for CSRF protection -->

    <!-- ISBN-10 field -->
    <div class="form-group">
      {{ form.isbn10.label(class="form-control-label") }}
      {{ form.isbn10(class="form-control form-control-lg") }}
      {% if form.isbn10.errors %}
        <div class="invalid-feedback">
          {% for error in form.isbn10.errors %}
            <span>{{ error }}</span>
          {% endfor %}
        </div>
      {% endif %}
    </div>

    <!-- Title field -->
    <div class="form-group">
      {{ form.title.label(class="form-control-label") }}
      {{ form.title(class="form-control form-control-lg") }}
      {% if form.title.errors %}
        <div class="invalid-feedback">
          {% for error in form.title.errors %}
            <span>{{ error }}</span>
          {% endfor %}
        </div>
      {% endif %}
    </div>

    <!-- Author field -->
    <div class="form-group">
      {{ form.author.label(class="form-control-label") }}
      {{ form.author(class="form-control form-control-lg") }}
      {% if form.author.errors %}
        <div class="invalid-feedback">
          {% for error in form.author.errors %}
            <span>{{ error }}</span>
          {% endfor %}
        </div>
      {% endif %}
    </div>

    <!-- Availability field -->
    <div class="form-group">
      {{ form.availability.label(class="form-control-label") }}
      {{ form.availability(class="form-control form-control-lg") }}
      {% if form.availability.errors %}
        <div class="invalid-feedback">
          {% for error in form.availability.errors %}
            <span>{{ error }}</span>
          {% endfor %}
        </div>
      {% endif %}
    </div>

    <!-- Submit button -->
    <button type="submit" class="btn btn-primary">Create Post</button>
  </form>

  <!-- If a post_id is passed to the template, display a "Delete Post" button -->
  {% if post_id %}
    <form method="POST" action="{{ url_for('delete_post', post_id=post_id) }}">
      <button type="submit" class="btn btn-danger">Delete Post</button>
    </form>
  {% endif %}
{% endblock %}



# ##create post
# @app.route("/create_post", methods=['GET', 'POST'])

# @login_required # Adding login_required decorator to ensure only logged in users can access this route
# def create_post():
#     form = PostForm() # initialize PostForm
#     user_id = current_user.id # get the current user's id
#     if form.validate_on_submit(): # if the form has been submitted and validated
#         try:
#             # insert the new post to the post table
#             insertion_command = sqlalchemy.text(f"""INSERT INTO post (owner, isbn10, availability, post_date) 
#                                                     VALUES ('{user_id}', '{form.isbn10.data}', '{form.availability.data}', '{date.today()}');""")
#             db.execute(insertion_command) # execute the SQL command
#             db.commit() # commit the transaction
#             flash(f'Post created for {form.title.data} successfully!', 'success') # flash a success message
#             return redirect(url_for('home')) # redirect to the home page
#         except Exception as e:
#             db.rollback() # rollback the transaction if an exception occurred
#             return Response(str(e), 403) # return a 403 Forbidden response if an exception occurred
#     return render_template('create_post.html', title='Create Post', form=form) # render the create_post.html template with the PostForm object

# @app.route("/post/<int:post_id>")
# @login_required # Adding login_required decorator to ensure only logged in users can access this route
# def post(post_id):
#     form = PostForm() # initialize PostForm
#     user_id = current_user.id     #get the current user's id 
#     result = db.execute(f"""SELECT id FROM post WHERE owner='{user_id}' AND isbn10='{form.isbn10.data}' AND availability='{form.availability.data}' AND post_date='{date.today()}' ORDER BY id DESC LIMIT 1;""")
#     post = result.fetchone()[0] # get the post with the specified id
#     return render_template('create_post.html', title=post.title, post=post) # render the create_post.html template with the post object

# # Update post route
# @app.route("/create_post/<int:post_id>/update", methods=['POST'])
# @login_required
# def update_post(post_id):
#     # Get the current user ID
#     user_id = current_user.id
    
#     # Get the post ID from the database based on the current user, ISBN10, availability, and post date
#     result = db.execute(f"""SELECT id FROM post WHERE owner='{user_id}' AND isbn10='{form.isbn10.data}' AND availability='{form.availability.data}' AND post_date='{date.today()}' ORDER BY id DESC LIMIT 1;""")
#     post = result.fetchone()[0]
    
#     # Create a PostForm instance
#     form = PostForm()

#     if form.validate_on_submit() and current_user.is_authenticated and post.owner == current_user.id:
#         try:
#             # Update the post attributes with the new values
#             post.isbn10 = form.isbn10.data
#             post.availability = form.availability.data
#             post.last_updated = datetime.now()
            
#             # Commit the changes to the database
#             db.session.commit()
            
#             # Show a success message and redirect to the home page
#             flash(f'Post updated for {form.title.data} successfully!', 'success')
#             return redirect(url_for('home'))
        
#         except Exception as e:
#             # If there was an error, rollback the transaction and return a 403 error
#             db.session.rollback()
#             return Response(str(e), 403)

#     # If the current user is not the owner of the post, show an error message and redirect to the home page
#     elif post.owner != current_user.id:
#         flash('You are not authorized to update this post', 'danger')
#         return redirect(url_for('home'))
    
#     # If the request method is GET, set the form values to the current post attributes
#     elif request.method == 'GET':
#         form.isbn10.data = post.isbn10
#         form.availability.data = post.availability
    
#     # Render the create_post.html template with the title "Update Post" and the PostForm instance
#     return render_template('create_post.html', title='Update Post', form=form)

#  # Delete post route
# @app.route("/create_post/<int:post_id>/delete_post", methods=['POST'])
# @login_required 
# def delete_post(post_id):
#     try:
#         # Delete the post with the specified post_id from the database
#         deletion_command = sqlalchemy.text(f"""DELETE FROM post WHERE id='{post_id}'""")
#         db.execute(deletion_command)
#         db.commit()
        
#         # Show a success message and redirect to the home page
#         flash(f'Post with ID {post_id} has been deleted successfully!', 'success')
    
#     except Exception as e:
#         # If there was an error, rollback the transaction and return a 403 error
#         db.rollback()
#         return Response(str(e), 403)